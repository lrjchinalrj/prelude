.prelude-utility (@use) when (@use = true) {
    // float
    // ==========================================================================
    .float-left {
    	float: left !important;
    }
    .float-right {
    	float: right !important;
    }

    // text align
    // ===========================================================================
    .text-left {
    	text-align: left !important;
    }
    .text-right {
    	text-align: right !important;
    }
    .text-center {
    	text-align: center !important;
    }
    .text-justify {
    	text-align: justify !important;
    }

    // visibility
    // ===========================================================================
    .hidden {
    	display: none !important;
    }
    .visible {
    	display: block !important;
    }
    .visibility-loop(@i) when ( @i <= length(@screens) ){
        @screen: extract(@screens, @i);
        .hidden-@{screen} {
            display: block !important;
        }
        .visible-@{screen} {
            display: none !important;
        }

        .visibility-loop(@i + 1);
    }
    .visibility-loop(1);

    .media-visibility-loop(@i) when ( @i <= length(@screens) ){      
        @screen: extract(@screens, @i);  
        @breakpoint-name: %("screen-%s-breakpoint", @screen);
        @breakpoint: @@breakpoint-name;

        & when (@i = 1){
            @max-name: %("screen-%s-max", @screen);
            @max: @@max-name;
            @media(max-width: @max) {
                .hidden-@{screen} {
                    display: none !important;
                }
                .visible-@{screen} {
                    display: block !important;
                }
            }
        }

        & when  (@i > 1) {
            & when  (@i < length(@screens)) {
                @min-name: %("screen-%s-min", @screen);
                @min: @@min-name;
                @max-name: %("screen-%s-max", @screen);
                @max: @@max-name;
                @media(min-width: @min) and (max-width: @max) {
                    .hidden-@{screen} {
                        display: none !important;
                    }
                    .visible-@{screen} {
                        display: block !important;
                    }
                }
            }

            & when (@i = length(@screens)) {
                @min-name: %("screen-%s-min", @screen);
                @min: @@min-name;
                @media(min-width: @min) {
                    .hidden-@{screen} {
                        display: none !important;
                    }
                    .visible-@{screen} {
                        display: block !important;
                    }
                }
            }
        }
        
        .media-visibility-loop(@i + 1);
    }

    .media-visibility-loop(1);

    // Responsive Utilities
    // ===========================================================================
    // IE10 Metro responsive
    // Required for Windows 8 Metro split-screen snapping with IE10
    @-ms-viewport{
        width: device-width;
    }

    // A hack for HTML5 contenteditable attribute on mobile 
    textarea[contenteditable] {
        -webkit-appearance: none;
    }

    // IE10 on Windows Phone 8
    // IE10 on WP8 doesn't report CSS pixels, but actual device pixels. In
    // other words, say on a Lumia, you'll get 768px as the device width,
    // meaning users will see the tablet styles and not phone styles.
    //
    // Alternatively you can override this with JS (see source below), but
    // we won't be doing that here given our limited scope.
    //
    // Source: http://timkadlec.com/2013/01/windows-phone-8-and-device-width/
    @media screen and (max-width: 400px) {
        @-ms-viewport{
            width: 320px;
        }
    }
}

.prelude-utility (@use-utility);